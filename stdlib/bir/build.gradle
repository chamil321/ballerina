/*
 * Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
 
apply from: "$rootDir/gradle/balNativeLibProject.gradle"

configurations {
    cliUtils
}

configurations.testRuntimeClasspath {
    resolutionStrategy {
        preferProjectModules()
    }
}

dependencies {
    baloImplementation project(path: ':ballerina-builtin', configuration: 'baloImplementation')
    baloImplementation project(path: ':ballerina-utils', configuration: 'baloImplementation')

    baloImplementation project(path: ':ballerina-internal', configuration: 'baloImplementation')
    baloImplementation project(path: ':ballerina-io', configuration: 'baloImplementation')

    // transitive
    baloImplementation project(path: ':ballerina-time', configuration: 'baloImplementation')
    baloImplementation project(path: ':ballerina-log-api', configuration: 'baloImplementation')
    baloImplementation project(path: ':ballerina-encoding', configuration: 'baloImplementation')
    baloImplementation project(path: ':ballerina-runtime-api', configuration: 'baloImplementation')

    baloCreat project(':lib-creator')
    implementation project(':ballerina-lang')
    implementation project(':ballerina-core')
    implementation project(':ballerina-builtin')
    implementation project(':ballerina-runtime-api')
    implementation project(':ballerina-io')
    implementation project(':ballerina-encoding')
    implementation project(':ballerina-log-api')
    implementation project(':ballerina-time')
    implementation project(':ballerina-internal')
    implementation project(':ballerina-utils')

    testCompile project(':ballerina-launcher')
    testCompile 'io.netty:netty-transport'
    testCompile 'org.testng:testng'
    testCompile 'org.slf4j:slf4j-jdk14'

    cliUtils project(':ballerina-cli-utils')
}

description = 'Ballerina - BIR Model'

task genBalx(type: JavaExec) {

    doFirst {
        copy {
            from "$buildDir/generated-balo/repo/ballerina"
            into "$buildDir/lib/repo/ballerina"
        }
    }
    dependsOn createBalo

    classpath = configurations.cliUtils
    main = 'org.ballerinalang.cli.utils.GenerateBalx'

    def src = "src/test/ballerina/bir_test"
    def fileName = "bir_test.bal"
    def target = "$buildDir/bir_test.balx"
    args("$src", "$fileName", "$target", "$buildDir")

    def balFiles = file("src/main/ballerina/")
    inputs.dir(balFiles)
    inputs.files(new File(src, fileName))
    inputs.files(configurations.baloImplementation)
    outputs.files(target)
    outputs.cacheIf { true }
}

test {
    dependsOn genBalx

    useTestNG() {
        suites 'src/test/resources/testng.xml'
    }
}

configurations.all {
    resolutionStrategy.preferProjectModules()
}
